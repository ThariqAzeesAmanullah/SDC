import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from google.colab import files
import io

# 📦 Upload the dataset
uploaded = files.upload()

# ✅ Automatically get the uploaded filename
csv_filename = list(uploaded.keys())[0]

# 🧾 Read the CSV into a DataFrame
try:
    df = pd.read_csv(io.BytesIO(uploaded[csv_filename]))
except Exception as e:
    print("❌ Error loading CSV:", e)
    raise

# ✅ Check required columns
required_columns = {"Size (sq ft)", "Bedrooms", "Location Score", "Price ($)"}
if not required_columns.issubset(df.columns):
    raise ValueError(f"❌ CSV is missing required columns: {required_columns - set(df.columns)}")

# 🎯 Define features and target
X = df[["Size (sq ft)", "Bedrooms", "Location Score"]]
y = df["Price ($)"]

# 🔀 Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 📈 Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# 🔮 Get user input with error handling
print("\n🔮 Enter details of the house to predict price:")
try:
    new_size = int(input("📏 Size (sq ft): "))
    new_bedrooms = int(input("🛏️ Number of Bedrooms: "))
    new_loc_score = int(input("📍 Location Score (1-10): "))
except ValueError:
    print("❌ Please enter valid numeric values.")
    raise

# 🧠 Predict the price
new_house = pd.DataFrame([[new_size, new_bedrooms, new_loc_score]],
                         columns=["Size (sq ft)", "Bedrooms", "Location Score"])
predicted_price = model.predict(new_house)

print(f"\n💰 Predicted Price: ${predicted_price[0]:,.2f}")

# 📊 Optional: Show model evaluation
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("\n📈 Model Evaluation:")
print(f"🔹 Mean Squared Error: {mse:.2f}")
print(f"🔹 R² Score: {r2:.2f}")
